# Makefile.config.  Generated from Makefile.config.in by configure.

#**************************************************************************
#*                                                                        *
#*                                 OCaml                                  *
#*                                                                        *
#*            Xavier Leroy, projet Cristal, INRIA Rocquencourt            *
#*                                                                        *
#*   Copyright 1999 Institut National de Recherche en Informatique et     *
#*     en Automatique.                                                    *
#*                                                                        *
#*   All rights reserved.  This file is distributed under the terms of    *
#*   the GNU Lesser General Public License version 2.1, with the          *
#*   special exception on linking described in the file LICENSE.          *
#*                                                                        *
#**************************************************************************

# The configuration Makefile

## The EMPTY variable, used in other definitions
EMPTY=

## Arguments passed to the configure script

CONFIGURE_ARGS=--disable-cfi --disable-call-counts --disable-flat-float-array --disable-vmthreads --disable-debug-runtime --disable-systhreads --disable-graph-lib --disable-str-lib --disable-unix-lib --disable-bigarray-lib --disable-ocamldoc --target=riscv64-unknown-elf --host=riscv64-unknown-elf

## Top build directory

TOP_BUILDDIR = .

## Installation directories

prefix=/usr/local

exec_prefix=${prefix}

### Where to install the binaries
BINDIR=${exec_prefix}/bin

datarootdir=${prefix}/share

### Where to install the standard library
LIBDIR=${exec_prefix}/lib/ocaml

### Where to install the stub code for the standard library
STUBLIBDIR=${exec_prefix}/lib/ocaml/stublibs

### Where to install the man pages
# Man pages for commands go in $(MANDIR)/man$(PROGRAMS_MAN_SECTION)
# Man pages for the library go in $(MANDIR)/man/man$(LIBRARIES_MAN_SECTION)
MANDIR=${prefix}/man
PROGRAMS_MAN_SECTION=1
LIBRARIES_MAN_SECTION=3

### Do #! scripts work on your system?
### Beware: on some systems (e.g. SunOS 4), this will work only if
### the string "#!$(BINDIR)/ocamlrun" is less than 32 characters long.
### In doubt, set HASHBANGSCRIPTS to false.
HASHBANGSCRIPTS=true

### Path to the libtool script
LIBTOOL = $(TOP_BUILDDIR)/libtool

### Which C compiler to use
TOOLPREF=riscv64-unknown-elf-
CC=riscv64-unknown-elf-gcc

CC_HAS_DEBUG_PREFIX_MAP=true
AS_HAS_DEBUG_PREFIX_MAP=false

### Additional link-time options
# To support dynamic loading of shared libraries (they need to look at
# our own symbols):
OC_LDFLAGS=

### How to invoke the C preprocessor
CPP=riscv64-unknown-elf-cpp

### How to invoke ranlib
RANLIB=riscv64-unknown-elf-ranlib
RANLIBCMD=riscv64-unknown-elf-ranlib

### How to invoke ar
ARCMD=riscv64-unknown-elf-ar

### Extension of object files
O=o
EXT_OBJ=.o

### How to tell the C compiler to output an object file
OUTPUTOBJ=-o $(EMPTY)

### Extension of static libraries
A=a
EXT_LIB=.a

### Extension of assembler files
S=s
EXT_ASM=.s

### Extension for shared libraries
SO=so
EXT_DLL=.so

SHAREDLIB_CFLAGS=

# Compile-time option to $(CC) to add a directory to be searched
# at run-time for shared libraries
RPATH=

############# Configuration for the native-code compiler

### Name of architecture for the native-code compiler
### Currently supported:
###
### i386        Intel Pentium PCs under Linux, *BSD*, NextStep
### power       Macintosh under Mac OS X and Linux
### arm         ARM under Linux
###
### Set ARCH=none if your machine is not supported
ARCH=riscv

# Whether the architecture has 64 bits
ARCH64=true

### Name of architecture model for the native-code compiler.
### Some architectures come in several slightly different flavors
### that share a common code generator. This variable tailors the
### behavior of the code generator to the particular flavor used.
### Currently needed only if ARCH=power; leave MODEL=default for
### other architectures.
### If ARCH=power: set MODEL=ppc
### For other architectures: leave MODEL=default
###
MODEL=riscv64

### Name of operating system family for the native-code compiler.
SYSTEM=unknown

### Command and flags to use for assembling ocamlopt-generated code
ASM=riscv64-unknown-elf-as	

### Command and flags to use for assembling .S files (often with preprocessing)
ASPP=riscv64-unknown-elf-gcc -c

### Set to "true" to install ".byte" executables (ocamlc.byte, etc.)
INSTALL_BYTECODE_PROGRAMS=true

### Extra flags to use for assembling .S files in profiling mode
ASPPPROFFLAGS=-DPROFILING

### true if profiling with gprof is supported, false otherwise
PROFILING=false

### Option to give to the C compiler for profiling
CC_PROFILE=-pg

############# Configuration for the contributed libraries

### Which libraries to compile and install
# Currently available:
#       unix            Unix system calls
#       str             Regular expressions and high-level string processing
#       threads         Lightweight concurrent processes
#       systhreads      Same as threads, requires POSIX threads
#       graph           Portable drawing primitives for X11
#       dynlink         Dynamic linking of bytecode
#       bigarray        Large, multidimensional numerical arrays
OTHERLIBRARIES=dynlink

### Link-time options to ocamlc or ocamlopt for linking with POSIX threads
# Needed for the "systhreads" package
PTHREAD_LINK=
PTHREAD_CAML_LINK=$(addprefix -cclib ,$(PTHREAD_LINK))

### -I options for finding the X11/*.h includes
# Needed for the "graph" package
X11_INCDDIR=NONE
X11_INCLUDES=$(addprefix -I,$(X11_INCDDIR))

### Link-time options to ocamlc or ocamlopt for linking with X11 libraries
# Needed for the "graph" package
X11_LINK=NONE

UNIX_OR_WIN32=unix
UNIXLIB=unix
GRAPHLIB=graph
LIBBFD_LINK=
LIBBFD_INCLUDE=
INSTALL_SOURCE_ARTIFACTS=true

OC_CFLAGS=-O2 -fno-strict-aliasing -fwrapv -Wall -Werror
OC_CPPFLAGS= -D_FILE_OFFSET_BITS=64 -DCAML_NAME_SPACE 
OCAMLC_CFLAGS=-O2 -fno-strict-aliasing -fwrapv 

OCAMLC_CPPFLAGS= -D_FILE_OFFSET_BITS=64
BYTECCLIBS= -lm   
EXE=
OUTPUTEXE=-o $(EMPTY)
SUPPORTS_SHARED_LIBRARIES=false
MKSHAREDLIBRPATH=
DYNLINKOPTS=
NATDYNLINK=false
NATDYNLINKOPTS=
SYSLIB=-l$(1)
MKLIB=rm -f $(1) && riscv64-unknown-elf-ar rc $(1) $(2) && riscv64-unknown-elf-ranlib $(1)
OCAMLOPT_CFLAGS=-O2 -fno-strict-aliasing -fwrapv
OCAMLOPT_CPPFLAGS= -D_FILE_OFFSET_BITS=64
NATIVECCLIBS= -lm 
SYSTHREAD_SUPPORT=false
PACKLD=riscv64-unknown-elf-ld -r -o $(EMPTY)
IFLEXDIR=
EXTRALIBS=
CCOMPTYPE=cc
TOOLCHAIN=cc
CMXS=cmx

# On Windows, MKDLL, MKEXE and MKMAINDLL must ultimately be equivalent to
#   $(FLEXLINK_CMD) $(FLEXLINK_FLAGS) [-exe|-maindll]
# or OCAML_FLEXLINK overriding will not work (see utils/config.mlp)

MKEXE=$(CC) $(OC_CFLAGS) $(OC_CPPFLAGS) $(OC_LDFLAGS)
MKDLL=shared-libs-not-available
MKMAINDLL=shared-libs-not-available

MKEXEDEBUGFLAG=-g
RUNTIMED=false
RUNTIMEI=false
WITH_DEBUGGER=
WITH_CAMLTEX=
WITH_OCAMLDOC=
ASM_CFI_SUPPORTED=false
WITH_FRAME_POINTERS=false
WITH_SPACETIME=false
ENABLE_CALL_COUNTS=true
WITH_PROFINFO=false
PROFINFO_WIDTH=0
LIBUNWIND_AVAILABLE=false
LIBUNWIND_INCLUDE_FLAGS=
LIBUNWIND_LINK_FLAGS=
WITH_FPIC=false
TARGET=riscv64-unknown-elf
HOST=riscv64-unknown-elf
FLAMBDA=false
WITH_FLAMBDA_INVARIANTS=false
FORCE_SAFE_STRING=false
DEFAULT_SAFE_STRING=true
WINDOWS_UNICODE=0
AFL_INSTRUMENT=false
MAX_TESTSUITE_DIR_RETRIES=0
FLAT_FLOAT_ARRAY=false
AWK=gawk

# The following variables were defined only in the config/Makefile.* files.
# They were not defined by the configure script used on Unix systems,
# so we also make sure to provide them only under Windows
# User code should absolutely not rely on their presence because
# in the future their definition may be moved to a more private part of
# the compiler's build system
ifeq "$(UNIX_OR_WIN32)" "win32"
  DISTRIB=$(prefix)
  OTOPDIR=$(WINTOPDIR)
  CTOPDIR=$(WINTOPDIR)
  CYGPATH=cygpath -m
  DIFF=/usr/bin/diff -q --strip-trailing-cr
  FIND=/usr/bin/find
  SORT=/usr/bin/sort
  SET_LD_PATH=PATH="$(PATH):$(LD_PATH)"
  FLEXLINK_CMD=flexlink
  MKEXE_ANSI=$(FLEXLINK) -exe
  FLEXDLL_CHAIN=
  # FLEXLINK_FLAGS must be safe to insert in an OCaml string
  #   (see ocamlmklibconfig.ml in tools/Makefile)
  FLEXLINK_FLAGS=
  FLEXLINK=$(FLEXLINK_CMD) $(FLEXLINK_FLAGS)

  ### Native command to build ocamlrun.exe

  ifeq "$(TOOLCHAIN)" "mingw"
    MKEXE_BOOT=$(CC) $(OC_CFLAGS) $(OC_LDFLAGS) $(OUTPUTEXE)$(1) $(2)
  endif # ifeq "$(TOOLCHAIN)" "mingw"

  ifeq "$(TOOLCHAIN)" "msvc"
    MERGEMANIFESTEXE=test ! -f $(1).manifest \
	           || mt -nologo -outputresource:$(1) -manifest $(1).manifest \
	           && rm -f $(1).manifest
    MKEXE_BOOT=$(CC) $(OC_CFLAGS) $(OUTPUTEXE)$(1) $(2) \
      /link /subsystem:console $(OC_LDFLAGS) && ($(MERGEMANIFESTEXE))
  endif # ifeq "$(TOOLCHAIN)" "msvc"
endif # ifeq "$(UNIX_OR_WIN32)" "win32"
SYSTEM=freestanding
SYSTEM=freestanding
SYSTEM=freestanding
